apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-cm
  namespace: argocd
data:
  configManagementPlugins: |
    - name: argocd-vault-plugin-kms
      init:
        command: ["/bin/sh", "-c"]
        args: ["echo 'Starting SOPS KMS plugin'"]
      generate:
        command: ["sh", "-c"]
        args: ["kustomize build . | sops --decrypt --input-type yaml --output-type yaml /dev/stdin"]


---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-repo-server
  namespace: argocd
spec:
  template:
    spec:
      containers:
      - name: argocd-repo-server
        # Other settings...
      - name: sops
        image: mozilla/sops:v3.7.3
        command: ["/bin/sh", "-c"]
        args:
          - echo "Initializing SOPS plugin..."; 
            while true; do sleep 10; done
        volumeMounts:
          - mountPath: /app/config
            name: argocd-repo-server-tls
        env:
          - name: AWS_SDK_LOAD_CONFIG
            value: "true"
      volumes:
      # Existing volumes...
      - name: aws-credentials
        secret:
          secretName: argocd-aws-credentials


---

apiVersion: v1
kind: Secret
metadata:
  name: argocd-aws-credentials
  namespace: argocd
type: Opaque
stringData:
  credentials: |
    [default]
    role_arn = arn:aws:iam::account-id:role/EksKmsRole
    web_identity_token_file = /var/run/secrets/eks.amazonaws.com/serviceaccount/token

---

pipeline {
    agent {
        label 'jenkins-agent'
    }
    
    environment {
        KMS_KEY = 'arn:aws:kms:region:account-id:key/your-key-id'
        REPO_URL = 'git@github.com:your-org/your-repo.git'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        
        stage('Encrypt ConfigMaps') {
            steps {
                script {
                    // Find all ConfigMap files
                    sh '''
                    for file in $(find . -name "*configmap*.yaml" -o -name "*configmap*.yml"); do
                        echo "Encrypting $file"
                        sops --encrypt --kms ${KMS_KEY} --in-place $file
                    done
                    '''
                }
            }
        }
        
        stage('Push to Git') {
            steps {
                script {
                    sh '''
                    git config user.name "Jenkins"
                    git config user.email "jenkins@example.com"
                    git add .
                    git commit -m "Encrypting ConfigMaps with SOPS [skip ci]"
                    git push origin HEAD:${BRANCH_NAME}
                    '''
                }
            }
        }
    }
}