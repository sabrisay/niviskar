pipeline {
    agent {
        kubernetes {
            inheritFrom 'awscli' // Inherit from the awscli agent template
        }
    }

    parameters {
        choice(name: 'ENV', choices: ['dev', 'staging', 'prod'], description: 'Select the environment')
        choice(name: 'SERVICE', choices: ['serviceA', 'serviceB', 'serviceC'], description: 'Select the service')
        choice(name: 'REGION', choices: ['us-west-2', 'us-east-1', 'eu-west-1'], description: 'Select the AWS region (ignored if prod)')
        string(name: 'SECRET_NAME', defaultValue: '', description: 'Enter the secret name')
        password(name: 'SECRET_VALUE', defaultValue: '', description: 'Enter the secret value (this will be hidden)')
    }

    environment {
        AWS_DEFAULT_REGION = "${params.ENV == 'prod' ? 'us-east-1' : params.REGION}" // Automatically use us-east-1 for prod
    }

    stages {
        stage('Validate Input') {
            steps {
                script {
                    if (!params.SECRET_NAME || !params.SECRET_VALUE) {
                        error("Secret name and value cannot be empty.")
                    }
                    echo "Selected environment: ${params.ENV}"
                    echo "Target region: ${env.AWS_DEFAULT_REGION}"
                }
            }
        }

        stage('Create or Update Secret in AWS Secrets Manager') {
            steps {
                script {
                    def secretPath = "sabri/${params.ENV}/services/${params.SERVICE}/${params.SECRET_NAME}"
                    echo "Creating or updating secret at path: ${secretPath} in AWS Secrets Manager."

                    container(name: 'awscli') {
                        withEnv([
                            'MASKED_SECRET_NAME=' + params.SECRET_NAME,
                            'MASKED_SECRET_VALUE=' + params.SECRET_VALUE
                        ]) {
                            // Check if the secret exists and update it if so, otherwise create a new secret
                            sh '''
                            aws configure set region ${AWS_DEFAULT_REGION}

                            SECRET_EXISTS=$(aws secretsmanager describe-secret --secret-id "sabri/${ENV}/services/${SERVICE}/${MASKED_SECRET_NAME}" --query 'Name' --output text 2>/dev/null || echo "NOT_FOUND")

                            if [ "$SECRET_EXISTS" != "NOT_FOUND" ]; then
                                echo "Secret exists. Updating secret."
                                aws secretsmanager update-secret \
                                    --secret-id "sabri/${ENV}/services/${SERVICE}/${MASKED_SECRET_NAME}" \
                                    --secret-string "$MASKED_SECRET_VALUE"
                            else
                                echo "Secret not found. Creating new secret."
                                aws secretsmanager create-secret \
                                    --name "sabri/${ENV}/services/${SERVICE}/${MASKED_SECRET_NAME}" \
                                    --secret-string "$MASKED_SECRET_VALUE"
                            fi
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Pipeline completed.'
        }
    }
}